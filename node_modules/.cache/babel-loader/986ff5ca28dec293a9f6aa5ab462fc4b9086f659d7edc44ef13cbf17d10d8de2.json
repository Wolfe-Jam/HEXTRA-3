{"ast":null,"code":"/**\n * Theme management system for HEXTRA-3\n * Consistent with VOID-Box theme implementation\n */\n\nconst THEME_STORAGE_KEY = 'hextra-theme';\nconst THEMES = {\n  LIGHT: 'light',\n  DARK: 'dark'\n};\nclass ThemeManager {\n  constructor() {\n    this.transitions = {\n      duration: '0.3s',\n      properties: ['background-color', 'color', 'border-color', 'filter']\n    };\n  }\n  init() {\n    console.log('ðŸŽ¨ Initializing theme manager');\n\n    // Set up system preference listener\n    this.setupSystemPreferenceListener();\n\n    // Get initial theme\n    const savedTheme = localStorage.getItem(THEME_STORAGE_KEY);\n    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    const initialTheme = savedTheme || (systemPrefersDark ? THEMES.DARK : THEMES.LIGHT);\n\n    // Apply initial theme\n    this.setTheme(initialTheme, false);\n  }\n  setupSystemPreferenceListener() {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    mediaQuery.addEventListener('change', e => {\n      if (!localStorage.getItem(THEME_STORAGE_KEY)) {\n        this.setTheme(e.matches ? THEMES.DARK : THEMES.LIGHT, true);\n      }\n    });\n  }\n  toggle() {\n    const currentTheme = document.documentElement.getAttribute('data-theme');\n    const newTheme = currentTheme === THEMES.DARK ? THEMES.LIGHT : THEMES.DARK;\n    this.setTheme(newTheme, true);\n  }\n  setTheme(theme, savePreference = true) {\n    // Apply theme to document\n    document.documentElement.setAttribute('data-theme', theme);\n\n    // Update theme toggle button if it exists\n    const themeToggle = document.getElementById('themeToggle');\n    if (themeToggle) {\n      themeToggle.setAttribute('aria-label', `Switch to ${theme === THEMES.DARK ? THEMES.LIGHT : THEMES.DARK} theme`);\n      themeToggle.setAttribute('data-theme', theme);\n    }\n\n    // Save preference if requested\n    if (savePreference) {\n      localStorage.setItem(THEME_STORAGE_KEY, theme);\n    }\n    console.log('ðŸŽ¨ Theme set to:', theme);\n  }\n  applyTransitions() {\n    const {\n      duration,\n      properties\n    } = this.transitions;\n    const transitionValue = properties.map(prop => `${prop} ${duration} ease`).join(', ');\n    document.documentElement.style.transition = transitionValue;\n  }\n  removeTransitions() {\n    document.documentElement.style.transition = 'none';\n  }\n}\nexport default new ThemeManager();","map":{"version":3,"names":["THEME_STORAGE_KEY","THEMES","LIGHT","DARK","ThemeManager","constructor","transitions","duration","properties","init","console","log","setupSystemPreferenceListener","savedTheme","localStorage","getItem","systemPrefersDark","window","matchMedia","matches","initialTheme","setTheme","mediaQuery","addEventListener","e","toggle","currentTheme","document","documentElement","getAttribute","newTheme","theme","savePreference","setAttribute","themeToggle","getElementById","setItem","applyTransitions","transitionValue","map","prop","join","style","transition","removeTransitions"],"sources":["/Users/wolfejam/HEXTRA-3/src/theme.js"],"sourcesContent":["/**\n * Theme management system for HEXTRA-3\n * Consistent with VOID-Box theme implementation\n */\n\nconst THEME_STORAGE_KEY = 'hextra-theme';\nconst THEMES = {\n    LIGHT: 'light',\n    DARK: 'dark'\n};\n\nclass ThemeManager {\n    constructor() {\n        this.transitions = {\n            duration: '0.3s',\n            properties: ['background-color', 'color', 'border-color', 'filter']\n        };\n    }\n\n    init() {\n        console.log('ðŸŽ¨ Initializing theme manager');\n        \n        // Set up system preference listener\n        this.setupSystemPreferenceListener();\n        \n        // Get initial theme\n        const savedTheme = localStorage.getItem(THEME_STORAGE_KEY);\n        const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n        const initialTheme = savedTheme || (systemPrefersDark ? THEMES.DARK : THEMES.LIGHT);\n        \n        // Apply initial theme\n        this.setTheme(initialTheme, false);\n    }\n\n    setupSystemPreferenceListener() {\n        const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n        mediaQuery.addEventListener('change', (e) => {\n            if (!localStorage.getItem(THEME_STORAGE_KEY)) {\n                this.setTheme(e.matches ? THEMES.DARK : THEMES.LIGHT, true);\n            }\n        });\n    }\n\n    toggle() {\n        const currentTheme = document.documentElement.getAttribute('data-theme');\n        const newTheme = currentTheme === THEMES.DARK ? THEMES.LIGHT : THEMES.DARK;\n        this.setTheme(newTheme, true);\n    }\n\n    setTheme(theme, savePreference = true) {\n        // Apply theme to document\n        document.documentElement.setAttribute('data-theme', theme);\n        \n        // Update theme toggle button if it exists\n        const themeToggle = document.getElementById('themeToggle');\n        if (themeToggle) {\n            themeToggle.setAttribute('aria-label', `Switch to ${theme === THEMES.DARK ? THEMES.LIGHT : THEMES.DARK} theme`);\n            themeToggle.setAttribute('data-theme', theme);\n        }\n\n        // Save preference if requested\n        if (savePreference) {\n            localStorage.setItem(THEME_STORAGE_KEY, theme);\n        }\n\n        console.log('ðŸŽ¨ Theme set to:', theme);\n    }\n\n    applyTransitions() {\n        const { duration, properties } = this.transitions;\n        const transitionValue = properties.map(prop => `${prop} ${duration} ease`).join(', ');\n        document.documentElement.style.transition = transitionValue;\n    }\n\n    removeTransitions() {\n        document.documentElement.style.transition = 'none';\n    }\n}\n\nexport default new ThemeManager();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}