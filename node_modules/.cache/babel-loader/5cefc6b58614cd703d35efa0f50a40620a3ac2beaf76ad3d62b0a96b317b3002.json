{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _utils = require(\"@jimp/utils\");\n\n/**\n * Applies a minimum color threshold to a greyscale image.  Converts image to greyscale by default\n * @param {number} options object\n *  max: A number auto limited between 0 - 255\n *  replace: (optional) A number auto limited between 0 - 255 (default 255)\n *  autoGreyscale: (optional) A boolean whether to apply greyscale beforehand (default true)\n * @param {number} cb (optional) a callback for when complete\n * @return {this} this for chaining of methods\n */\nvar _default = function _default() {\n  return {\n    threshold: function threshold(_ref, cb) {\n      var _this = this;\n      var max = _ref.max,\n        _ref$replace = _ref.replace,\n        replace = _ref$replace === void 0 ? 255 : _ref$replace,\n        _ref$autoGreyscale = _ref.autoGreyscale,\n        autoGreyscale = _ref$autoGreyscale === void 0 ? true : _ref$autoGreyscale;\n      if (typeof max !== \"number\") {\n        return _utils.throwError.call(this, \"max must be a number\", cb);\n      }\n      if (typeof replace !== \"number\") {\n        return _utils.throwError.call(this, \"replace must be a number\", cb);\n      }\n      if (typeof autoGreyscale !== \"boolean\") {\n        return _utils.throwError.call(this, \"autoGreyscale must be a boolean\", cb);\n      }\n      max = this.constructor.limit255(max);\n      replace = this.constructor.limit255(replace);\n      if (autoGreyscale) {\n        this.greyscale();\n      }\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        var grey = _this.bitmap.data[idx] < max ? _this.bitmap.data[idx] : replace;\n        _this.bitmap.data[idx] = grey;\n        _this.bitmap.data[idx + 1] = grey;\n        _this.bitmap.data[idx + 2] = grey;\n      });\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    }\n  };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_utils","require","_default","threshold","_ref","cb","_this","max","_ref$replace","replace","_ref$autoGreyscale","autoGreyscale","throwError","call","constructor","limit255","greyscale","scanQuiet","bitmap","width","height","x","y","idx","grey","data","isNodePattern"],"sources":["/Users/wolfejam/HEXTRA-3/node_modules/@jimp/plugin-threshold/src/index.js"],"sourcesContent":["import { isNodePattern, throwError } from \"@jimp/utils\";\n\n/**\n * Applies a minimum color threshold to a greyscale image.  Converts image to greyscale by default\n * @param {number} options object\n *  max: A number auto limited between 0 - 255\n *  replace: (optional) A number auto limited between 0 - 255 (default 255)\n *  autoGreyscale: (optional) A boolean whether to apply greyscale beforehand (default true)\n * @param {number} cb (optional) a callback for when complete\n * @return {this} this for chaining of methods\n */\nexport default () => ({\n  threshold({ max, replace = 255, autoGreyscale = true }, cb) {\n    if (typeof max !== \"number\") {\n      return throwError.call(this, \"max must be a number\", cb);\n    }\n\n    if (typeof replace !== \"number\") {\n      return throwError.call(this, \"replace must be a number\", cb);\n    }\n\n    if (typeof autoGreyscale !== \"boolean\") {\n      return throwError.call(this, \"autoGreyscale must be a boolean\", cb);\n    }\n\n    max = this.constructor.limit255(max);\n    replace = this.constructor.limit255(replace);\n\n    if (autoGreyscale) {\n      this.greyscale();\n    }\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, (x, y, idx) => {\n      const grey =\n        this.bitmap.data[idx] < max ? this.bitmap.data[idx] : replace;\n\n      this.bitmap.data[idx] = grey;\n      this.bitmap.data[idx + 1] = grey;\n      this.bitmap.data[idx + 2] = grey;\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n});\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;;AAEA;;;;;;;;;eASe,SAAAC,SAAA;EAAA,OAAO;IACpBC,SADoB,WAAAA,UAAAC,IAAA,EACoCC,EADpC,EACwC;MAAA,IAAAC,KAAA;MAAA,IAAhDC,GAAgD,GAAAH,IAAA,CAAhDG,GAAgD;QAAAC,YAAA,GAAAJ,IAAA,CAA3CK,OAA2C;QAA3CA,OAA2C,GAAAD,YAAA,cAAjC,GAAiC,GAAAA,YAAA;QAAAE,kBAAA,GAAAN,IAAA,CAA5BO,aAA4B;QAA5BA,aAA4B,GAAAD,kBAAA,cAAZ,IAAY,GAAAA,kBAAA;MAC1D,IAAI,OAAOH,GAAP,KAAe,QAAnB,EAA6B;QAC3B,OAAOP,MAAA,CAAAY,UAAA,CAAWC,IAAX,CAAgB,IAAhB,EAAsB,sBAAtB,EAA8CR,EAA9C,CAAP;MACD;MAED,IAAI,OAAOI,OAAP,KAAmB,QAAvB,EAAiC;QAC/B,OAAOT,MAAA,CAAAY,UAAA,CAAWC,IAAX,CAAgB,IAAhB,EAAsB,0BAAtB,EAAkDR,EAAlD,CAAP;MACD;MAED,IAAI,OAAOM,aAAP,KAAyB,SAA7B,EAAwC;QACtC,OAAOX,MAAA,CAAAY,UAAA,CAAWC,IAAX,CAAgB,IAAhB,EAAsB,iCAAtB,EAAyDR,EAAzD,CAAP;MACD;MAEDE,GAAG,GAAG,KAAKO,WAAL,CAAiBC,QAAjB,CAA0BR,GAA1B,CAAN;MACAE,OAAO,GAAG,KAAKK,WAAL,CAAiBC,QAAjB,CAA0BN,OAA1B,CAAV;MAEA,IAAIE,aAAJ,EAAmB;QACjB,KAAKK,SAAL;MACD;MAED,KAAKC,SAAL,CAAe,CAAf,EAAkB,CAAlB,EAAqB,KAAKC,MAAL,CAAYC,KAAjC,EAAwC,KAAKD,MAAL,CAAYE,MAApD,EAA4D,UAACC,CAAD,EAAIC,CAAJ,EAAOC,GAAP,EAAe;QACzE,IAAMC,IAAI,GACRlB,KAAI,CAACY,MAAL,CAAYO,IAAZ,CAAiBF,GAAjB,IAAwBhB,GAAxB,GAA8BD,KAAI,CAACY,MAAL,CAAYO,IAAZ,CAAiBF,GAAjB,CAA9B,GAAsDd,OADxD;QAGAH,KAAI,CAACY,MAAL,CAAYO,IAAZ,CAAiBF,GAAjB,IAAwBC,IAAxB;QACAlB,KAAI,CAACY,MAAL,CAAYO,IAAZ,CAAiBF,GAAG,GAAG,CAAvB,IAA4BC,IAA5B;QACAlB,KAAI,CAACY,MAAL,CAAYO,IAAZ,CAAiBF,GAAG,GAAG,CAAvB,IAA4BC,IAA5B;MACD,CAPD;MASA,IAAI,IAAAxB,MAAA,CAAA0B,aAAA,EAAcrB,EAAd,CAAJ,EAAuB;QACrBA,EAAE,CAACQ,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB;MACD;MAED,OAAO,IAAP;IACD;EAnCmB,CAAP;AAAA,C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}