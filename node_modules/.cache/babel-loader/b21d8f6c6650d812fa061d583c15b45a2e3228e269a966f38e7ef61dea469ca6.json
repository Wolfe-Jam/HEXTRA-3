{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _loadBmfont = _interopRequireDefault(require(\"load-bmfont\"));\nvar _utils = require(\"@jimp/utils\");\nvar _measureText = require(\"./measure-text\");\nfunction xOffsetBasedOnAlignment(constants, font, line, maxWidth, alignment) {\n  if (alignment === constants.HORIZONTAL_ALIGN_LEFT) {\n    return 0;\n  }\n  if (alignment === constants.HORIZONTAL_ALIGN_CENTER) {\n    return (maxWidth - (0, _measureText.measureText)(font, line)) / 2;\n  }\n  return maxWidth - (0, _measureText.measureText)(font, line);\n}\nfunction drawCharacter(image, font, x, y, _char) {\n  if (_char.width > 0 && _char.height > 0) {\n    var characterPage = font.pages[_char.page];\n    image.blit(characterPage, x + _char.xoffset, y + _char.yoffset, _char.x, _char.y, _char.width, _char.height);\n  }\n  return image;\n}\nfunction printText(font, x, y, text, defaultCharWidth) {\n  for (var i = 0; i < text.length; i++) {\n    var _char2 = void 0;\n    if (font.chars[text[i]]) {\n      _char2 = text[i];\n    } else if (/\\s/.test(text[i])) {\n      _char2 = \"\";\n    } else {\n      _char2 = \"?\";\n    }\n    var fontChar = font.chars[_char2] || {};\n    var fontKerning = font.kernings[_char2];\n    drawCharacter(this, font, x, y, fontChar || {});\n    var kerning = fontKerning && fontKerning[text[i + 1]] ? fontKerning[text[i + 1]] : 0;\n    x += kerning + (fontChar.xadvance || defaultCharWidth);\n  }\n}\nfunction splitLines(font, text, maxWidth) {\n  var words = text.split(\" \");\n  var lines = [];\n  var currentLine = [];\n  var longestLine = 0;\n  words.forEach(function (word) {\n    var line = [].concat((0, _toConsumableArray2[\"default\"])(currentLine), [word]).join(\" \");\n    var length = (0, _measureText.measureText)(font, line);\n    if (length <= maxWidth) {\n      if (length > longestLine) {\n        longestLine = length;\n      }\n      currentLine.push(word);\n    } else {\n      lines.push(currentLine);\n      currentLine = [word];\n    }\n  });\n  lines.push(currentLine);\n  return {\n    lines: lines,\n    longestLine: longestLine\n  };\n}\nfunction loadPages(Jimp, dir, pages) {\n  var newPages = pages.map(function (page) {\n    return Jimp.read(dir + \"/\" + page);\n  });\n  return Promise.all(newPages);\n}\nvar dir = process.env.DIRNAME || \"\".concat(__dirname, \"/../\");\nvar _default = function _default() {\n  return {\n    constants: {\n      measureText: _measureText.measureText,\n      measureTextHeight: _measureText.measureTextHeight,\n      FONT_SANS_8_BLACK: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-8-black/open-sans-8-black.fnt\"),\n      FONT_SANS_10_BLACK: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-10-black/open-sans-10-black.fnt\"),\n      FONT_SANS_12_BLACK: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-12-black/open-sans-12-black.fnt\"),\n      FONT_SANS_14_BLACK: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-14-black/open-sans-14-black.fnt\"),\n      FONT_SANS_16_BLACK: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-16-black/open-sans-16-black.fnt\"),\n      FONT_SANS_32_BLACK: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-32-black/open-sans-32-black.fnt\"),\n      FONT_SANS_64_BLACK: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-64-black/open-sans-64-black.fnt\"),\n      FONT_SANS_128_BLACK: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-128-black/open-sans-128-black.fnt\"),\n      FONT_SANS_8_WHITE: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-8-white/open-sans-8-white.fnt\"),\n      FONT_SANS_16_WHITE: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-16-white/open-sans-16-white.fnt\"),\n      FONT_SANS_32_WHITE: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-32-white/open-sans-32-white.fnt\"),\n      FONT_SANS_64_WHITE: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-64-white/open-sans-64-white.fnt\"),\n      FONT_SANS_128_WHITE: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-128-white/open-sans-128-white.fnt\"),\n      /**\n       * Loads a bitmap font from a file\n       * @param {string} file the file path of a .fnt file\n       * @param {function(Error, Jimp)} cb (optional) a function to call when the font is loaded\n       * @returns {Promise} a promise\n       */\n      loadFont: function loadFont(file, cb) {\n        var _this = this;\n        if (typeof file !== \"string\") return _utils.throwError.call(this, \"file must be a string\", cb);\n        return new Promise(function (resolve, reject) {\n          cb = cb || function (err, font) {\n            if (err) reject(err);else resolve(font);\n          };\n          (0, _loadBmfont[\"default\"])(file, function (err, font) {\n            var chars = {};\n            var kernings = {};\n            if (err) {\n              return _utils.throwError.call(_this, err, cb);\n            }\n            for (var i = 0; i < font.chars.length; i++) {\n              chars[String.fromCharCode(font.chars[i].id)] = font.chars[i];\n            }\n            for (var _i = 0; _i < font.kernings.length; _i++) {\n              var firstString = String.fromCharCode(font.kernings[_i].first);\n              kernings[firstString] = kernings[firstString] || {};\n              kernings[firstString][String.fromCharCode(font.kernings[_i].second)] = font.kernings[_i].amount;\n            }\n            loadPages(_this, _path[\"default\"].dirname(file), font.pages).then(function (pages) {\n              cb(null, {\n                chars: chars,\n                kernings: kernings,\n                pages: pages,\n                common: font.common,\n                info: font.info\n              });\n            });\n          });\n        });\n      }\n    },\n    \"class\": {\n      /**\n       * Draws a text on a image on a given boundary\n       * @param {Jimp} font a bitmap font loaded from `Jimp.loadFont` command\n       * @param {number} x the x position to start drawing the text\n       * @param {number} y the y position to start drawing the text\n       * @param {any} text the text to draw (string or object with `text`, `alignmentX`, and/or `alignmentY`)\n       * @param {number} maxWidth (optional) the boundary width to draw in\n       * @param {number} maxHeight (optional) the boundary height to draw in\n       * @param {function(Error, Jimp)} cb (optional) a function to call when the text is written\n       * @returns {Jimp} this for chaining of methods\n       */\n      print: function print(font, x, y, text, maxWidth, maxHeight, cb) {\n        var _this2 = this;\n        if (typeof maxWidth === \"function\" && typeof cb === \"undefined\") {\n          cb = maxWidth;\n          maxWidth = Infinity;\n        }\n        if (typeof maxWidth === \"undefined\") {\n          maxWidth = Infinity;\n        }\n        if (typeof maxHeight === \"function\" && typeof cb === \"undefined\") {\n          cb = maxHeight;\n          maxHeight = Infinity;\n        }\n        if (typeof maxHeight === \"undefined\") {\n          maxHeight = Infinity;\n        }\n        if ((0, _typeof2[\"default\"])(font) !== \"object\") {\n          return _utils.throwError.call(this, \"font must be a Jimp loadFont\", cb);\n        }\n        if (typeof x !== \"number\" || typeof y !== \"number\" || typeof maxWidth !== \"number\") {\n          return _utils.throwError.call(this, \"x, y and maxWidth must be numbers\", cb);\n        }\n        if (typeof maxWidth !== \"number\") {\n          return _utils.throwError.call(this, \"maxWidth must be a number\", cb);\n        }\n        if (typeof maxHeight !== \"number\") {\n          return _utils.throwError.call(this, \"maxHeight must be a number\", cb);\n        }\n        var alignmentX;\n        var alignmentY;\n        if ((0, _typeof2[\"default\"])(text) === \"object\" && text.text !== null && text.text !== undefined) {\n          alignmentX = text.alignmentX || this.constructor.HORIZONTAL_ALIGN_LEFT;\n          alignmentY = text.alignmentY || this.constructor.VERTICAL_ALIGN_TOP;\n          var _text = text;\n          text = _text.text;\n        } else {\n          alignmentX = this.constructor.HORIZONTAL_ALIGN_LEFT;\n          alignmentY = this.constructor.VERTICAL_ALIGN_TOP;\n          text = text.toString();\n        }\n        if (maxHeight !== Infinity && alignmentY === this.constructor.VERTICAL_ALIGN_BOTTOM) {\n          y += maxHeight - (0, _measureText.measureTextHeight)(font, text, maxWidth);\n        } else if (maxHeight !== Infinity && alignmentY === this.constructor.VERTICAL_ALIGN_MIDDLE) {\n          y += maxHeight / 2 - (0, _measureText.measureTextHeight)(font, text, maxWidth) / 2;\n        }\n        var defaultCharWidth = Object.entries(font.chars)[0][1].xadvance;\n        var _splitLines = splitLines(font, text, maxWidth),\n          lines = _splitLines.lines,\n          longestLine = _splitLines.longestLine;\n        lines.forEach(function (line) {\n          var lineString = line.join(\" \");\n          var alignmentWidth = xOffsetBasedOnAlignment(_this2.constructor, font, lineString, maxWidth, alignmentX);\n          printText.call(_this2, font, x + alignmentWidth, y, lineString, defaultCharWidth);\n          y += font.common.lineHeight;\n        });\n        if ((0, _utils.isNodePattern)(cb)) {\n          cb.call(this, null, this, {\n            x: x + longestLine,\n            y: y\n          });\n        }\n        return this;\n      }\n    }\n  };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_path","_interopRequireDefault","require","_loadBmfont","_utils","_measureText","xOffsetBasedOnAlignment","constants","font","line","maxWidth","alignment","HORIZONTAL_ALIGN_LEFT","HORIZONTAL_ALIGN_CENTER","measureText","drawCharacter","image","x","y","_char","width","height","characterPage","pages","page","blit","xoffset","yoffset","printText","text","defaultCharWidth","i","length","_char2","chars","test","fontChar","fontKerning","kernings","kerning","xadvance","splitLines","words","split","lines","currentLine","longestLine","forEach","word","concat","_toConsumableArray2","join","push","loadPages","Jimp","dir","newPages","map","read","Promise","all","process","env","DIRNAME","__dirname","_default","measureTextHeight","FONT_SANS_8_BLACK","FONT_SANS_10_BLACK","FONT_SANS_12_BLACK","FONT_SANS_14_BLACK","FONT_SANS_16_BLACK","FONT_SANS_32_BLACK","FONT_SANS_64_BLACK","FONT_SANS_128_BLACK","FONT_SANS_8_WHITE","FONT_SANS_16_WHITE","FONT_SANS_32_WHITE","FONT_SANS_64_WHITE","FONT_SANS_128_WHITE","loadFont","file","cb","_this","throwError","call","resolve","reject","err","String","fromCharCode","id","_i","firstString","first","second","amount","dirname","then","common","info","print","maxHeight","_this2","Infinity","_typeof2","alignmentX","alignmentY","undefined","constructor","VERTICAL_ALIGN_TOP","_text","toString","VERTICAL_ALIGN_BOTTOM","VERTICAL_ALIGN_MIDDLE","Object","entries","_splitLines","lineString","alignmentWidth","lineHeight","isNodePattern"],"sources":["/Users/wolfejam/HEXTRA-3/node_modules/@jimp/plugin-print/src/index.js"],"sourcesContent":["import Path from \"path\";\nimport bMFont from \"load-bmfont\";\nimport { isNodePattern, throwError } from \"@jimp/utils\";\nimport { measureText, measureTextHeight } from \"./measure-text\";\n\nfunction xOffsetBasedOnAlignment(constants, font, line, maxWidth, alignment) {\n  if (alignment === constants.HORIZONTAL_ALIGN_LEFT) {\n    return 0;\n  }\n\n  if (alignment === constants.HORIZONTAL_ALIGN_CENTER) {\n    return (maxWidth - measureText(font, line)) / 2;\n  }\n\n  return maxWidth - measureText(font, line);\n}\n\nfunction drawCharacter(image, font, x, y, char) {\n  if (char.width > 0 && char.height > 0) {\n    const characterPage = font.pages[char.page];\n\n    image.blit(\n      characterPage,\n      x + char.xoffset,\n      y + char.yoffset,\n      char.x,\n      char.y,\n      char.width,\n      char.height\n    );\n  }\n\n  return image;\n}\n\nfunction printText(font, x, y, text, defaultCharWidth) {\n  for (let i = 0; i < text.length; i++) {\n    let char;\n\n    if (font.chars[text[i]]) {\n      char = text[i];\n    } else if (/\\s/.test(text[i])) {\n      char = \"\";\n    } else {\n      char = \"?\";\n    }\n\n    const fontChar = font.chars[char] || {};\n    const fontKerning = font.kernings[char];\n\n    drawCharacter(this, font, x, y, fontChar || {});\n\n    const kerning =\n      fontKerning && fontKerning[text[i + 1]] ? fontKerning[text[i + 1]] : 0;\n\n    x += kerning + (fontChar.xadvance || defaultCharWidth);\n  }\n}\n\nfunction splitLines(font, text, maxWidth) {\n  const words = text.split(\" \");\n  const lines = [];\n  let currentLine = [];\n  let longestLine = 0;\n\n  words.forEach((word) => {\n    const line = [...currentLine, word].join(\" \");\n    const length = measureText(font, line);\n\n    if (length <= maxWidth) {\n      if (length > longestLine) {\n        longestLine = length;\n      }\n\n      currentLine.push(word);\n    } else {\n      lines.push(currentLine);\n      currentLine = [word];\n    }\n  });\n\n  lines.push(currentLine);\n\n  return {\n    lines,\n    longestLine,\n  };\n}\n\nfunction loadPages(Jimp, dir, pages) {\n  const newPages = pages.map((page) => {\n    return Jimp.read(dir + \"/\" + page);\n  });\n\n  return Promise.all(newPages);\n}\n\nconst dir = process.env.DIRNAME || `${__dirname}/../`;\n\nexport default () => ({\n  constants: {\n    measureText,\n    measureTextHeight,\n    FONT_SANS_8_BLACK: Path.join(\n      dir,\n      \"fonts/open-sans/open-sans-8-black/open-sans-8-black.fnt\"\n    ),\n    FONT_SANS_10_BLACK: Path.join(\n      dir,\n      \"fonts/open-sans/open-sans-10-black/open-sans-10-black.fnt\"\n    ),\n    FONT_SANS_12_BLACK: Path.join(\n      dir,\n      \"fonts/open-sans/open-sans-12-black/open-sans-12-black.fnt\"\n    ),\n    FONT_SANS_14_BLACK: Path.join(\n      dir,\n      \"fonts/open-sans/open-sans-14-black/open-sans-14-black.fnt\"\n    ),\n    FONT_SANS_16_BLACK: Path.join(\n      dir,\n      \"fonts/open-sans/open-sans-16-black/open-sans-16-black.fnt\"\n    ),\n    FONT_SANS_32_BLACK: Path.join(\n      dir,\n      \"fonts/open-sans/open-sans-32-black/open-sans-32-black.fnt\"\n    ),\n    FONT_SANS_64_BLACK: Path.join(\n      dir,\n      \"fonts/open-sans/open-sans-64-black/open-sans-64-black.fnt\"\n    ),\n    FONT_SANS_128_BLACK: Path.join(\n      dir,\n      \"fonts/open-sans/open-sans-128-black/open-sans-128-black.fnt\"\n    ),\n\n    FONT_SANS_8_WHITE: Path.join(\n      dir,\n      \"fonts/open-sans/open-sans-8-white/open-sans-8-white.fnt\"\n    ),\n    FONT_SANS_16_WHITE: Path.join(\n      dir,\n      \"fonts/open-sans/open-sans-16-white/open-sans-16-white.fnt\"\n    ),\n    FONT_SANS_32_WHITE: Path.join(\n      dir,\n      \"fonts/open-sans/open-sans-32-white/open-sans-32-white.fnt\"\n    ),\n    FONT_SANS_64_WHITE: Path.join(\n      dir,\n      \"fonts/open-sans/open-sans-64-white/open-sans-64-white.fnt\"\n    ),\n    FONT_SANS_128_WHITE: Path.join(\n      dir,\n      \"fonts/open-sans/open-sans-128-white/open-sans-128-white.fnt\"\n    ),\n\n    /**\n     * Loads a bitmap font from a file\n     * @param {string} file the file path of a .fnt file\n     * @param {function(Error, Jimp)} cb (optional) a function to call when the font is loaded\n     * @returns {Promise} a promise\n     */\n    loadFont(file, cb) {\n      if (typeof file !== \"string\")\n        return throwError.call(this, \"file must be a string\", cb);\n\n      return new Promise((resolve, reject) => {\n        cb =\n          cb ||\n          function (err, font) {\n            if (err) reject(err);\n            else resolve(font);\n          };\n\n        bMFont(file, (err, font) => {\n          const chars = {};\n          const kernings = {};\n\n          if (err) {\n            return throwError.call(this, err, cb);\n          }\n\n          for (let i = 0; i < font.chars.length; i++) {\n            chars[String.fromCharCode(font.chars[i].id)] = font.chars[i];\n          }\n\n          for (let i = 0; i < font.kernings.length; i++) {\n            const firstString = String.fromCharCode(font.kernings[i].first);\n            kernings[firstString] = kernings[firstString] || {};\n            kernings[firstString][\n              String.fromCharCode(font.kernings[i].second)\n            ] = font.kernings[i].amount;\n          }\n\n          loadPages(this, Path.dirname(file), font.pages).then((pages) => {\n            cb(null, {\n              chars,\n              kernings,\n              pages,\n              common: font.common,\n              info: font.info,\n            });\n          });\n        });\n      });\n    },\n  },\n\n  class: {\n    /**\n     * Draws a text on a image on a given boundary\n     * @param {Jimp} font a bitmap font loaded from `Jimp.loadFont` command\n     * @param {number} x the x position to start drawing the text\n     * @param {number} y the y position to start drawing the text\n     * @param {any} text the text to draw (string or object with `text`, `alignmentX`, and/or `alignmentY`)\n     * @param {number} maxWidth (optional) the boundary width to draw in\n     * @param {number} maxHeight (optional) the boundary height to draw in\n     * @param {function(Error, Jimp)} cb (optional) a function to call when the text is written\n     * @returns {Jimp} this for chaining of methods\n     */\n    print(font, x, y, text, maxWidth, maxHeight, cb) {\n      if (typeof maxWidth === \"function\" && typeof cb === \"undefined\") {\n        cb = maxWidth;\n        maxWidth = Infinity;\n      }\n\n      if (typeof maxWidth === \"undefined\") {\n        maxWidth = Infinity;\n      }\n\n      if (typeof maxHeight === \"function\" && typeof cb === \"undefined\") {\n        cb = maxHeight;\n        maxHeight = Infinity;\n      }\n\n      if (typeof maxHeight === \"undefined\") {\n        maxHeight = Infinity;\n      }\n\n      if (typeof font !== \"object\") {\n        return throwError.call(this, \"font must be a Jimp loadFont\", cb);\n      }\n\n      if (\n        typeof x !== \"number\" ||\n        typeof y !== \"number\" ||\n        typeof maxWidth !== \"number\"\n      ) {\n        return throwError.call(this, \"x, y and maxWidth must be numbers\", cb);\n      }\n\n      if (typeof maxWidth !== \"number\") {\n        return throwError.call(this, \"maxWidth must be a number\", cb);\n      }\n\n      if (typeof maxHeight !== \"number\") {\n        return throwError.call(this, \"maxHeight must be a number\", cb);\n      }\n\n      let alignmentX;\n      let alignmentY;\n\n      if (\n        typeof text === \"object\" &&\n        text.text !== null &&\n        text.text !== undefined\n      ) {\n        alignmentX = text.alignmentX || this.constructor.HORIZONTAL_ALIGN_LEFT;\n        alignmentY = text.alignmentY || this.constructor.VERTICAL_ALIGN_TOP;\n        ({ text } = text);\n      } else {\n        alignmentX = this.constructor.HORIZONTAL_ALIGN_LEFT;\n        alignmentY = this.constructor.VERTICAL_ALIGN_TOP;\n        text = text.toString();\n      }\n\n      if (\n        maxHeight !== Infinity &&\n        alignmentY === this.constructor.VERTICAL_ALIGN_BOTTOM\n      ) {\n        y += maxHeight - measureTextHeight(font, text, maxWidth);\n      } else if (\n        maxHeight !== Infinity &&\n        alignmentY === this.constructor.VERTICAL_ALIGN_MIDDLE\n      ) {\n        y += maxHeight / 2 - measureTextHeight(font, text, maxWidth) / 2;\n      }\n\n      const defaultCharWidth = Object.entries(font.chars)[0][1].xadvance;\n      const { lines, longestLine } = splitLines(font, text, maxWidth);\n\n      lines.forEach((line) => {\n        const lineString = line.join(\" \");\n        const alignmentWidth = xOffsetBasedOnAlignment(\n          this.constructor,\n          font,\n          lineString,\n          maxWidth,\n          alignmentX\n        );\n\n        printText.call(\n          this,\n          font,\n          x + alignmentWidth,\n          y,\n          lineString,\n          defaultCharWidth\n        );\n\n        y += font.common.lineHeight;\n      });\n\n      if (isNodePattern(cb)) {\n        cb.call(this, null, this, { x: x + longestLine, y });\n      }\n\n      return this;\n    },\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}