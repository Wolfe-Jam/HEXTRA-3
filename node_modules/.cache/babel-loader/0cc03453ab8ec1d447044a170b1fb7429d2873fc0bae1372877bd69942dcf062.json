{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _bmpJs = _interopRequireDefault(require(\"bmp-js\"));\nvar _utils = require(\"@jimp/utils\");\nvar MIME_TYPE = \"image/bmp\";\nvar MIME_TYPE_SECOND = \"image/x-ms-bmp\";\nfunction toAGBR(image) {\n  return (0, _utils.scan)(image, 0, 0, image.bitmap.width, image.bitmap.height, function (x, y, index) {\n    var red = this.bitmap.data[index + 0];\n    var green = this.bitmap.data[index + 1];\n    var blue = this.bitmap.data[index + 2];\n    var alpha = this.bitmap.data[index + 3];\n    this.bitmap.data[index + 0] = alpha;\n    this.bitmap.data[index + 1] = blue;\n    this.bitmap.data[index + 2] = green;\n    this.bitmap.data[index + 3] = red;\n  }).bitmap;\n}\nfunction fromAGBR(bitmap) {\n  return (0, _utils.scan)({\n    bitmap: bitmap\n  }, 0, 0, bitmap.width, bitmap.height, function (x, y, index) {\n    var alpha = this.bitmap.data[index + 0];\n    var blue = this.bitmap.data[index + 1];\n    var green = this.bitmap.data[index + 2];\n    var red = this.bitmap.data[index + 3];\n    this.bitmap.data[index + 0] = red;\n    this.bitmap.data[index + 1] = green;\n    this.bitmap.data[index + 2] = blue;\n    this.bitmap.data[index + 3] = bitmap.is_with_alpha ? alpha : 0xff;\n  }).bitmap;\n}\nvar decode = function decode(data) {\n  return fromAGBR(_bmpJs[\"default\"].decode(data));\n};\nvar encode = function encode(image) {\n  return _bmpJs[\"default\"].encode(toAGBR(image)).data;\n};\nvar _default = function _default() {\n  var _decoders, _encoders;\n  return {\n    mime: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, [\"bmp\"]),\n    constants: {\n      MIME_BMP: MIME_TYPE,\n      MIME_X_MS_BMP: MIME_TYPE_SECOND\n    },\n    decoders: (_decoders = {}, (0, _defineProperty2[\"default\"])(_decoders, MIME_TYPE, decode), (0, _defineProperty2[\"default\"])(_decoders, MIME_TYPE_SECOND, decode), _decoders),\n    encoders: (_encoders = {}, (0, _defineProperty2[\"default\"])(_encoders, MIME_TYPE, encode), (0, _defineProperty2[\"default\"])(_encoders, MIME_TYPE_SECOND, encode), _encoders)\n  };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_bmpJs","_interopRequireDefault","require","_utils","MIME_TYPE","MIME_TYPE_SECOND","toAGBR","image","scan","bitmap","width","height","x","y","index","red","data","green","blue","alpha","fromAGBR","is_with_alpha","decode","encode","_default","_decoders","_encoders","mime","_defineProperty2","constants","MIME_BMP","MIME_X_MS_BMP","decoders","encoders"],"sources":["/Users/wolfejam/HEXTRA-3/node_modules/@jimp/bmp/src/index.js"],"sourcesContent":["import BMP from \"bmp-js\";\nimport { scan } from \"@jimp/utils\";\n\nconst MIME_TYPE = \"image/bmp\";\nconst MIME_TYPE_SECOND = \"image/x-ms-bmp\";\n\nfunction toAGBR(image) {\n  return scan(\n    image,\n    0,\n    0,\n    image.bitmap.width,\n    image.bitmap.height,\n    function (x, y, index) {\n      const red = this.bitmap.data[index + 0];\n      const green = this.bitmap.data[index + 1];\n      const blue = this.bitmap.data[index + 2];\n      const alpha = this.bitmap.data[index + 3];\n\n      this.bitmap.data[index + 0] = alpha;\n      this.bitmap.data[index + 1] = blue;\n      this.bitmap.data[index + 2] = green;\n      this.bitmap.data[index + 3] = red;\n    }\n  ).bitmap;\n}\n\nfunction fromAGBR(bitmap) {\n  return scan(\n    { bitmap },\n    0,\n    0,\n    bitmap.width,\n    bitmap.height,\n    function (x, y, index) {\n      const alpha = this.bitmap.data[index + 0];\n      const blue = this.bitmap.data[index + 1];\n      const green = this.bitmap.data[index + 2];\n      const red = this.bitmap.data[index + 3];\n\n      this.bitmap.data[index + 0] = red;\n      this.bitmap.data[index + 1] = green;\n      this.bitmap.data[index + 2] = blue;\n      this.bitmap.data[index + 3] = bitmap.is_with_alpha ? alpha : 0xff;\n    }\n  ).bitmap;\n}\n\nconst decode = (data) => fromAGBR(BMP.decode(data));\nconst encode = (image) => BMP.encode(toAGBR(image)).data;\n\nexport default () => ({\n  mime: { [MIME_TYPE]: [\"bmp\"] },\n\n  constants: {\n    MIME_BMP: MIME_TYPE,\n    MIME_X_MS_BMP: MIME_TYPE_SECOND,\n  },\n\n  decoders: {\n    [MIME_TYPE]: decode,\n    [MIME_TYPE_SECOND]: decode,\n  },\n\n  encoders: {\n    [MIME_TYPE]: encode,\n    [MIME_TYPE_SECOND]: encode,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}