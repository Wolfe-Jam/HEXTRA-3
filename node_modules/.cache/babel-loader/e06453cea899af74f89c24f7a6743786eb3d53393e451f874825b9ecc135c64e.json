{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _pngjs = require(\"pngjs\");\nvar _utils = require(\"@jimp/utils\");\nvar MIME_TYPE = \"image/png\"; // PNG filter types\n\nvar PNG_FILTER_AUTO = -1;\nvar PNG_FILTER_NONE = 0;\nvar PNG_FILTER_SUB = 1;\nvar PNG_FILTER_UP = 2;\nvar PNG_FILTER_AVERAGE = 3;\nvar PNG_FILTER_PATH = 4;\nvar _default = function _default() {\n  return {\n    mime: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, [\"png\"]),\n    constants: {\n      MIME_PNG: MIME_TYPE,\n      PNG_FILTER_AUTO: PNG_FILTER_AUTO,\n      PNG_FILTER_NONE: PNG_FILTER_NONE,\n      PNG_FILTER_SUB: PNG_FILTER_SUB,\n      PNG_FILTER_UP: PNG_FILTER_UP,\n      PNG_FILTER_AVERAGE: PNG_FILTER_AVERAGE,\n      PNG_FILTER_PATH: PNG_FILTER_PATH\n    },\n    hasAlpha: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, true),\n    decoders: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, _pngjs.PNG.sync.read),\n    encoders: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, function (data) {\n      var png = new _pngjs.PNG({\n        width: data.bitmap.width,\n        height: data.bitmap.height\n      });\n      png.data = data.bitmap.data;\n      return _pngjs.PNG.sync.write(png, {\n        width: data.bitmap.width,\n        height: data.bitmap.height,\n        deflateLevel: data._deflateLevel,\n        deflateStrategy: data._deflateStrategy,\n        filterType: data._filterType,\n        colorType: typeof data._colorType === \"number\" ? data._colorType : data._rgba ? 6 : 2,\n        inputHasAlpha: data._rgba\n      });\n    }),\n    \"class\": {\n      _deflateLevel: 9,\n      _deflateStrategy: 3,\n      _filterType: PNG_FILTER_AUTO,\n      _colorType: null,\n      /**\n       * Sets the deflate level used when saving as PNG format (default is 9)\n       * @param {number} l Deflate level to use 0-9. 0 is no compression. 9 (default) is maximum compression.\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */\n      deflateLevel: function deflateLevel(l, cb) {\n        if (typeof l !== \"number\") {\n          return _utils.throwError.call(this, \"l must be a number\", cb);\n        }\n        if (l < 0 || l > 9) {\n          return _utils.throwError.call(this, \"l must be a number 0 - 9\", cb);\n        }\n        this._deflateLevel = Math.round(l);\n        if ((0, _utils.isNodePattern)(cb)) {\n          cb.call(this, null, this);\n        }\n        return this;\n      },\n      /**\n       * Sets the deflate strategy used when saving as PNG format (default is 3)\n       * @param {number} s Deflate strategy to use 0-3.\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */\n      deflateStrategy: function deflateStrategy(s, cb) {\n        if (typeof s !== \"number\") {\n          return _utils.throwError.call(this, \"s must be a number\", cb);\n        }\n        if (s < 0 || s > 3) {\n          return _utils.throwError.call(this, \"s must be a number 0 - 3\", cb);\n        }\n        this._deflateStrategy = Math.round(s);\n        if ((0, _utils.isNodePattern)(cb)) {\n          cb.call(this, null, this);\n        }\n        return this;\n      },\n      /**\n       * Sets the filter type used when saving as PNG format (default is automatic filters)\n       * @param {number} f The quality to use -1-4.\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */\n      filterType: function filterType(f, cb) {\n        if (typeof f !== \"number\") {\n          return _utils.throwError.call(this, \"n must be a number\", cb);\n        }\n        if (f < -1 || f > 4) {\n          return _utils.throwError.call(this, \"n must be -1 (auto) or a number 0 - 4\", cb);\n        }\n        this._filterType = Math.round(f);\n        if ((0, _utils.isNodePattern)(cb)) {\n          cb.call(this, null, this);\n        }\n        return this;\n      },\n      /**\n       * Sets the color type used when saving as PNG format\n       * @param {number} s color type to use 0, 2, 4, 6.\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */\n      colorType: function colorType(s, cb) {\n        if (typeof s !== \"number\") {\n          return _utils.throwError.call(this, \"s must be a number\", cb);\n        }\n        if (s !== 0 && s !== 2 && s !== 4 && s !== 6) {\n          return _utils.throwError.call(this, \"s must be a number 0, 2, 4, 6.\", cb);\n        }\n        this._colorType = Math.round(s);\n        if ((0, _utils.isNodePattern)(cb)) {\n          cb.call(this, null, this);\n        }\n        return this;\n      }\n    }\n  };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_pngjs","require","_utils","MIME_TYPE","PNG_FILTER_AUTO","PNG_FILTER_NONE","PNG_FILTER_SUB","PNG_FILTER_UP","PNG_FILTER_AVERAGE","PNG_FILTER_PATH","_default","mime","_defineProperty2","constants","MIME_PNG","hasAlpha","decoders","PNG","sync","read","encoders","data","png","width","bitmap","height","write","deflateLevel","_deflateLevel","deflateStrategy","_deflateStrategy","filterType","_filterType","colorType","_colorType","_rgba","inputHasAlpha","l","cb","throwError","call","Math","round","isNodePattern","s","f"],"sources":["/Users/wolfejam/HEXTRA-3/node_modules/@jimp/png/src/index.js"],"sourcesContent":["import { PNG } from \"pngjs\";\nimport { throwError, isNodePattern } from \"@jimp/utils\";\n\nconst MIME_TYPE = \"image/png\";\n\n// PNG filter types\nconst PNG_FILTER_AUTO = -1;\nconst PNG_FILTER_NONE = 0;\nconst PNG_FILTER_SUB = 1;\nconst PNG_FILTER_UP = 2;\nconst PNG_FILTER_AVERAGE = 3;\nconst PNG_FILTER_PATH = 4;\n\nexport default () => ({\n  mime: { [MIME_TYPE]: [\"png\"] },\n\n  constants: {\n    MIME_PNG: MIME_TYPE,\n    PNG_FILTER_AUTO,\n    PNG_FILTER_NONE,\n    PNG_FILTER_SUB,\n    PNG_FILTER_UP,\n    PNG_FILTER_AVERAGE,\n    PNG_FILTER_PATH,\n  },\n\n  hasAlpha: { [MIME_TYPE]: true },\n  decoders: { [MIME_TYPE]: PNG.sync.read },\n  encoders: {\n    [MIME_TYPE](data) {\n      const png = new PNG({\n        width: data.bitmap.width,\n        height: data.bitmap.height,\n      });\n\n      png.data = data.bitmap.data;\n\n      return PNG.sync.write(png, {\n        width: data.bitmap.width,\n        height: data.bitmap.height,\n        deflateLevel: data._deflateLevel,\n        deflateStrategy: data._deflateStrategy,\n        filterType: data._filterType,\n        colorType:\n          typeof data._colorType === \"number\"\n            ? data._colorType\n            : data._rgba\n            ? 6\n            : 2,\n        inputHasAlpha: data._rgba,\n      });\n    },\n  },\n\n  class: {\n    _deflateLevel: 9,\n    _deflateStrategy: 3,\n    _filterType: PNG_FILTER_AUTO,\n    _colorType: null,\n\n    /**\n     * Sets the deflate level used when saving as PNG format (default is 9)\n     * @param {number} l Deflate level to use 0-9. 0 is no compression. 9 (default) is maximum compression.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    deflateLevel(l, cb) {\n      if (typeof l !== \"number\") {\n        return throwError.call(this, \"l must be a number\", cb);\n      }\n\n      if (l < 0 || l > 9) {\n        return throwError.call(this, \"l must be a number 0 - 9\", cb);\n      }\n\n      this._deflateLevel = Math.round(l);\n\n      if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n\n    /**\n     * Sets the deflate strategy used when saving as PNG format (default is 3)\n     * @param {number} s Deflate strategy to use 0-3.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    deflateStrategy(s, cb) {\n      if (typeof s !== \"number\") {\n        return throwError.call(this, \"s must be a number\", cb);\n      }\n\n      if (s < 0 || s > 3) {\n        return throwError.call(this, \"s must be a number 0 - 3\", cb);\n      }\n\n      this._deflateStrategy = Math.round(s);\n\n      if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n\n    /**\n     * Sets the filter type used when saving as PNG format (default is automatic filters)\n     * @param {number} f The quality to use -1-4.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    filterType(f, cb) {\n      if (typeof f !== \"number\") {\n        return throwError.call(this, \"n must be a number\", cb);\n      }\n\n      if (f < -1 || f > 4) {\n        return throwError.call(\n          this,\n          \"n must be -1 (auto) or a number 0 - 4\",\n          cb\n        );\n      }\n\n      this._filterType = Math.round(f);\n\n      if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n    /**\n     * Sets the color type used when saving as PNG format\n     * @param {number} s color type to use 0, 2, 4, 6.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */ colorType(s, cb) {\n      if (typeof s !== \"number\") {\n        return throwError.call(this, \"s must be a number\", cb);\n      }\n\n      if (s !== 0 && s !== 2 && s !== 4 && s !== 6) {\n        return throwError.call(this, \"s must be a number 0, 2, 4, 6.\", cb);\n      }\n\n      this._colorType = Math.round(s);\n\n      if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}