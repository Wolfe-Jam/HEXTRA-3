{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _utils = require(\"@jimp/utils\");\n\n/**\n * Creates a circle out of an image.\n * @param {function(Error, Jimp)} options (optional)\n * opacity - opacity of the shadow between 0 and 1\n * size,- of the shadow\n * blur - how blurry the shadow is\n * x- x position of shadow\n * y - y position of shadow\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nvar _default = function _default() {\n  return {\n    shadow: function shadow() {\n      var _this = this;\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var cb = arguments.length > 1 ? arguments[1] : undefined;\n      if (typeof options === \"function\") {\n        cb = options;\n        options = {};\n      }\n      var _options = options,\n        _options$opacity = _options.opacity,\n        opacity = _options$opacity === void 0 ? 0.7 : _options$opacity,\n        _options$size = _options.size,\n        size = _options$size === void 0 ? 1.1 : _options$size,\n        _options$x = _options.x,\n        x = _options$x === void 0 ? -25 : _options$x,\n        _options$y = _options.y,\n        y = _options$y === void 0 ? 25 : _options$y,\n        _options$blur = _options.blur,\n        blur = _options$blur === void 0 ? 5 : _options$blur; // clone the image\n\n      var orig = this.clone();\n      var shadow = this.clone(); // turn all it's pixels black\n\n      shadow.scan(0, 0, shadow.bitmap.width, shadow.bitmap.height, function (x, y, idx) {\n        shadow.bitmap.data[idx] = 0x00;\n        shadow.bitmap.data[idx + 1] = 0x00;\n        shadow.bitmap.data[idx + 2] = 0x00; // up the opacity a little,\n\n        shadow.bitmap.data[idx + 3] = shadow.constructor.limit255(shadow.bitmap.data[idx + 3] * opacity);\n        _this.bitmap.data[idx] = 0x00;\n        _this.bitmap.data[idx + 1] = 0x00;\n        _this.bitmap.data[idx + 2] = 0x00;\n        _this.bitmap.data[idx + 3] = 0x00;\n      }); // enlarge it. This creates a \"shadow\".\n\n      shadow.resize(shadow.bitmap.width * size, shadow.bitmap.height * size).blur(blur); // Then blit the \"shadow\" onto the background and the image on top of that.\n\n      this.composite(shadow, x, y);\n      this.composite(orig, 0, 0);\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    }\n  };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_utils","require","_default","shadow","_this","options","arguments","length","undefined","cb","_options","_options$opacity","opacity","_options$size","size","_options$x","x","_options$y","y","_options$blur","blur","orig","clone","scan","bitmap","width","height","idx","data","constructor","limit255","resize","composite","isNodePattern","call"],"sources":["/Users/wolfejam/HEXTRA-3/node_modules/@jimp/plugin-shadow/src/index.js"],"sourcesContent":["import { isNodePattern } from \"@jimp/utils\";\n\n/**\n * Creates a circle out of an image.\n * @param {function(Error, Jimp)} options (optional)\n * opacity - opacity of the shadow between 0 and 1\n * size,- of the shadow\n * blur - how blurry the shadow is\n * x- x position of shadow\n * y - y position of shadow\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  shadow(options = {}, cb) {\n    if (typeof options === \"function\") {\n      cb = options;\n      options = {};\n    }\n\n    const { opacity = 0.7, size = 1.1, x = -25, y = 25, blur = 5 } = options;\n\n    // clone the image\n    const orig = this.clone();\n    const shadow = this.clone();\n\n    // turn all it's pixels black\n    shadow.scan(\n      0,\n      0,\n      shadow.bitmap.width,\n      shadow.bitmap.height,\n      (x, y, idx) => {\n        shadow.bitmap.data[idx] = 0x00;\n        shadow.bitmap.data[idx + 1] = 0x00;\n        shadow.bitmap.data[idx + 2] = 0x00;\n        // up the opacity a little,\n        shadow.bitmap.data[idx + 3] = shadow.constructor.limit255(\n          shadow.bitmap.data[idx + 3] * opacity\n        );\n\n        this.bitmap.data[idx] = 0x00;\n        this.bitmap.data[idx + 1] = 0x00;\n        this.bitmap.data[idx + 2] = 0x00;\n        this.bitmap.data[idx + 3] = 0x00;\n      }\n    );\n\n    // enlarge it. This creates a \"shadow\".\n    shadow\n      .resize(shadow.bitmap.width * size, shadow.bitmap.height * size)\n      .blur(blur);\n\n    // Then blit the \"shadow\" onto the background and the image on top of that.\n    this.composite(shadow, x, y);\n    this.composite(orig, 0, 0);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}