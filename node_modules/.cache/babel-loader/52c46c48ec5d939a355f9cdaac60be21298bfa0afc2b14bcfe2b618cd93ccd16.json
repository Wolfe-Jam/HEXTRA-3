{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = configure;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _core = _interopRequireWildcard(require(\"@jimp/core\"));\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction configure(configuration) {\n  var jimpInstance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _core[\"default\"];\n  var jimpConfig = {\n    hasAlpha: {},\n    encoders: {},\n    decoders: {},\n    \"class\": {},\n    constants: {}\n  };\n  function addToConfig(newConfig) {\n    Object.entries(newConfig).forEach(function (_ref) {\n      var _ref2 = (0, _slicedToArray2[\"default\"])(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n      jimpConfig[key] = _objectSpread({}, jimpConfig[key], {}, value);\n    });\n  }\n  function addImageType(typeModule) {\n    var type = typeModule();\n    if (Array.isArray(type.mime)) {\n      _core.addType.apply(void 0, (0, _toConsumableArray2[\"default\"])(type.mime));\n    } else {\n      Object.entries(type.mime).forEach(function (mimeType) {\n        return _core.addType.apply(void 0, (0, _toConsumableArray2[\"default\"])(mimeType));\n      });\n    }\n    delete type.mime;\n    addToConfig(type);\n  }\n  function addPlugin(pluginModule) {\n    var plugin = pluginModule(_core.jimpEvChange) || {};\n    if (!plugin[\"class\"] && !plugin.constants) {\n      // Default to class function\n      addToConfig({\n        \"class\": plugin\n      });\n    } else {\n      addToConfig(plugin);\n    }\n  }\n  if (configuration.types) {\n    configuration.types.forEach(addImageType);\n    jimpInstance.decoders = _objectSpread({}, jimpInstance.decoders, {}, jimpConfig.decoders);\n    jimpInstance.encoders = _objectSpread({}, jimpInstance.encoders, {}, jimpConfig.encoders);\n    jimpInstance.hasAlpha = _objectSpread({}, jimpInstance.hasAlpha, {}, jimpConfig.hasAlpha);\n  }\n  if (configuration.plugins) {\n    configuration.plugins.forEach(addPlugin);\n  }\n  (0, _core.addJimpMethods)(jimpConfig[\"class\"], jimpInstance);\n  (0, _core.addConstants)(jimpConfig.constants, jimpInstance);\n  return _core[\"default\"];\n}\nmodule.exports = exports.default;","map":{"version":3,"names":["_core","_interopRequireWildcard","require","configure","configuration","jimpInstance","arguments","length","undefined","jimpConfig","hasAlpha","encoders","decoders","constants","addToConfig","newConfig","Object","entries","forEach","_ref","_ref2","_slicedToArray2","key","value","_objectSpread","addImageType","typeModule","type","Array","isArray","mime","addType","apply","_toConsumableArray2","mimeType","addPlugin","pluginModule","plugin","jimpEvChange","types","plugins","addJimpMethods","addConstants"],"sources":["/Users/wolfejam/HEXTRA-3/node_modules/@jimp/custom/src/index.js"],"sourcesContent":["import Jimp, {\n  addType,\n  addJimpMethods,\n  addConstants,\n  jimpEvChange,\n} from \"@jimp/core\";\n\nexport default function configure(configuration, jimpInstance = Jimp) {\n  const jimpConfig = {\n    hasAlpha: {},\n    encoders: {},\n    decoders: {},\n    class: {},\n    constants: {},\n  };\n\n  function addToConfig(newConfig) {\n    Object.entries(newConfig).forEach(([key, value]) => {\n      jimpConfig[key] = {\n        ...jimpConfig[key],\n        ...value,\n      };\n    });\n  }\n\n  function addImageType(typeModule) {\n    const type = typeModule();\n\n    if (Array.isArray(type.mime)) {\n      addType(...type.mime);\n    } else {\n      Object.entries(type.mime).forEach((mimeType) => addType(...mimeType));\n    }\n\n    delete type.mime;\n    addToConfig(type);\n  }\n\n  function addPlugin(pluginModule) {\n    const plugin = pluginModule(jimpEvChange) || {};\n    if (!plugin.class && !plugin.constants) {\n      // Default to class function\n      addToConfig({ class: plugin });\n    } else {\n      addToConfig(plugin);\n    }\n  }\n\n  if (configuration.types) {\n    configuration.types.forEach(addImageType);\n\n    jimpInstance.decoders = {\n      ...jimpInstance.decoders,\n      ...jimpConfig.decoders,\n    };\n    jimpInstance.encoders = {\n      ...jimpInstance.encoders,\n      ...jimpConfig.encoders,\n    };\n    jimpInstance.hasAlpha = {\n      ...jimpInstance.hasAlpha,\n      ...jimpConfig.hasAlpha,\n    };\n  }\n\n  if (configuration.plugins) {\n    configuration.plugins.forEach(addPlugin);\n  }\n\n  addJimpMethods(jimpConfig.class, jimpInstance);\n  addConstants(jimpConfig.constants, jimpInstance);\n\n  return Jimp;\n}\n"],"mappings":";;;;;;;;;;;AAAA,IAAAA,KAAA,GAAAC,uBAAA,CAAAC,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOe,SAASC,SAATA,CAAmBC,aAAnB,EAAuD;EAAA,IAArBC,YAAqB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAANN,KAAA,WAAM;EACpE,IAAMS,UAAU,GAAG;IACjBC,QAAQ,EAAE,EADO;IAEjBC,QAAQ,EAAE,EAFO;IAGjBC,QAAQ,EAAE,EAHO;IAIjB,SAAO,EAJU;IAKjBC,SAAS,EAAE;EALM,CAAnB;EAQA,SAASC,WAATA,CAAqBC,SAArB,EAAgC;IAC9BC,MAAM,CAACC,OAAP,CAAeF,SAAf,EAA0BG,OAA1B,CAAkC,UAAAC,IAAA,EAAkB;MAAA,IAAAC,KAAA,OAAAC,eAAA,aAAAF,IAAA;QAAhBG,GAAgB,GAAAF,KAAA;QAAXG,KAAW,GAAAH,KAAA;MAClDX,UAAU,CAACa,GAAD,CAAV,GAAAE,aAAA,KACKf,UAAU,CAACa,GAAD,CADf,MAEKC,KAFL;IAID,CALD;EAMD;EAED,SAASE,YAATA,CAAsBC,UAAtB,EAAkC;IAChC,IAAMC,IAAI,GAAGD,UAAU,EAAvB;IAEA,IAAIE,KAAK,CAACC,OAAN,CAAcF,IAAI,CAACG,IAAnB,CAAJ,EAA8B;MAC5B9B,KAAA,CAAA+B,OAAA,CAAAC,KAAA,aAAAC,mBAAA,aAAWN,IAAI,CAACG,IAAhB;IACD,CAFD,MAEO;MACLd,MAAM,CAACC,OAAP,CAAeU,IAAI,CAACG,IAApB,EAA0BZ,OAA1B,CAAkC,UAACgB,QAAD;QAAA,OAAclC,KAAA,CAAA+B,OAAA,CAAAC,KAAA,aAAAC,mBAAA,aAAWC,QAAX,EAAd;MAAA,CAAlC;IACD;IAED,OAAOP,IAAI,CAACG,IAAZ;IACAhB,WAAW,CAACa,IAAD,CAAX;EACD;EAED,SAASQ,SAATA,CAAmBC,YAAnB,EAAiC;IAC/B,IAAMC,MAAM,GAAGD,YAAY,CAACpC,KAAA,CAAAsC,YAAD,CAAZ,IAA8B,EAA7C;IACA,IAAI,CAACD,MAAM,SAAP,IAAiB,CAACA,MAAM,CAACxB,SAA7B,EAAwC;MACtC;MACAC,WAAW,CAAC;QAAE,SAAOuB;MAAT,CAAD,CAAX;IACD,CAHD,MAGO;MACLvB,WAAW,CAACuB,MAAD,CAAX;IACD;EACF;EAED,IAAIjC,aAAa,CAACmC,KAAlB,EAAyB;IACvBnC,aAAa,CAACmC,KAAd,CAAoBrB,OAApB,CAA4BO,YAA5B;IAEApB,YAAY,CAACO,QAAb,GAAAY,aAAA,KACKnB,YAAY,CAACO,QADlB,MAEKH,UAAU,CAACG,QAFhB;IAIAP,YAAY,CAACM,QAAb,GAAAa,aAAA,KACKnB,YAAY,CAACM,QADlB,MAEKF,UAAU,CAACE,QAFhB;IAIAN,YAAY,CAACK,QAAb,GAAAc,aAAA,KACKnB,YAAY,CAACK,QADlB,MAEKD,UAAU,CAACC,QAFhB;EAID;EAED,IAAIN,aAAa,CAACoC,OAAlB,EAA2B;IACzBpC,aAAa,CAACoC,OAAd,CAAsBtB,OAAtB,CAA8BiB,SAA9B;EACD;EAED,IAAAnC,KAAA,CAAAyC,cAAA,EAAehC,UAAU,SAAzB,EAAiCJ,YAAjC;EACA,IAAAL,KAAA,CAAA0C,YAAA,EAAajC,UAAU,CAACI,SAAxB,EAAmCR,YAAnC;EAEA,OAAOL,KAAA,WAAP;AACD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}