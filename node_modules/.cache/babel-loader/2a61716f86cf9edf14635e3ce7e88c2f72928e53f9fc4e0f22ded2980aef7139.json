{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _utils = require(\"@jimp/utils\");\n\n/**\n * Displaces the image based on the provided displacement map\n * @param {object} map the source Jimp instance\n * @param {number} offset the maximum displacement value\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nvar _default = function _default() {\n  return {\n    displace: function displace(map, offset, cb) {\n      if ((0, _typeof2[\"default\"])(map) !== \"object\" || map.constructor !== this.constructor) {\n        return _utils.throwError.call(this, \"The source must be a Jimp image\", cb);\n      }\n      if (typeof offset !== \"number\") {\n        return _utils.throwError.call(this, \"factor must be a number\", cb);\n      }\n      var source = this.cloneQuiet();\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        var displacement = map.bitmap.data[idx] / 256 * offset;\n        displacement = Math.round(displacement);\n        var ids = this.getPixelIndex(x + displacement, y);\n        this.bitmap.data[ids] = source.bitmap.data[idx];\n        this.bitmap.data[ids + 1] = source.bitmap.data[idx + 1];\n        this.bitmap.data[ids + 2] = source.bitmap.data[idx + 2];\n      });\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    }\n  };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_utils","require","_default","displace","map","offset","cb","_typeof2","constructor","throwError","call","source","cloneQuiet","scanQuiet","bitmap","width","height","x","y","idx","displacement","data","Math","round","ids","getPixelIndex","isNodePattern"],"sources":["/Users/wolfejam/HEXTRA-3/node_modules/@jimp/plugin-displace/src/index.js"],"sourcesContent":["import { isNodePattern, throwError } from \"@jimp/utils\";\n\n/**\n * Displaces the image based on the provided displacement map\n * @param {object} map the source Jimp instance\n * @param {number} offset the maximum displacement value\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  displace(map, offset, cb) {\n    if (typeof map !== \"object\" || map.constructor !== this.constructor) {\n      return throwError.call(this, \"The source must be a Jimp image\", cb);\n    }\n\n    if (typeof offset !== \"number\") {\n      return throwError.call(this, \"factor must be a number\", cb);\n    }\n\n    const source = this.cloneQuiet();\n    this.scanQuiet(\n      0,\n      0,\n      this.bitmap.width,\n      this.bitmap.height,\n      function (x, y, idx) {\n        let displacement = (map.bitmap.data[idx] / 256) * offset;\n        displacement = Math.round(displacement);\n\n        const ids = this.getPixelIndex(x + displacement, y);\n        this.bitmap.data[ids] = source.bitmap.data[idx];\n        this.bitmap.data[ids + 1] = source.bitmap.data[idx + 1];\n        this.bitmap.data[ids + 2] = source.bitmap.data[idx + 2];\n      }\n    );\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n});\n"],"mappings":";;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;;AAEA;;;;;;;eAOe,SAAAC,SAAA;EAAA,OAAO;IACpBC,QADoB,WAAAA,SACXC,GADW,EACNC,MADM,EACEC,EADF,EACM;MACxB,IAAI,IAAAC,QAAA,aAAOH,GAAP,MAAe,QAAf,IAA2BA,GAAG,CAACI,WAAJ,KAAoB,KAAKA,WAAxD,EAAqE;QACnE,OAAOR,MAAA,CAAAS,UAAA,CAAWC,IAAX,CAAgB,IAAhB,EAAsB,iCAAtB,EAAyDJ,EAAzD,CAAP;MACD;MAED,IAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;QAC9B,OAAOL,MAAA,CAAAS,UAAA,CAAWC,IAAX,CAAgB,IAAhB,EAAsB,yBAAtB,EAAiDJ,EAAjD,CAAP;MACD;MAED,IAAMK,MAAM,GAAG,KAAKC,UAAL,EAAf;MACA,KAAKC,SAAL,CACE,CADF,EAEE,CAFF,EAGE,KAAKC,MAAL,CAAYC,KAHd,EAIE,KAAKD,MAAL,CAAYE,MAJd,EAKE,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,GAAhB,EAAqB;QACnB,IAAIC,YAAY,GAAIhB,GAAG,CAACU,MAAJ,CAAWO,IAAX,CAAgBF,GAAhB,IAAuB,GAAxB,GAA+Bd,MAAlD;QACAe,YAAY,GAAGE,IAAI,CAACC,KAAL,CAAWH,YAAX,CAAf;QAEA,IAAMI,GAAG,GAAG,KAAKC,aAAL,CAAmBR,CAAC,GAAGG,YAAvB,EAAqCF,CAArC,CAAZ;QACA,KAAKJ,MAAL,CAAYO,IAAZ,CAAiBG,GAAjB,IAAwBb,MAAM,CAACG,MAAP,CAAcO,IAAd,CAAmBF,GAAnB,CAAxB;QACA,KAAKL,MAAL,CAAYO,IAAZ,CAAiBG,GAAG,GAAG,CAAvB,IAA4Bb,MAAM,CAACG,MAAP,CAAcO,IAAd,CAAmBF,GAAG,GAAG,CAAzB,CAA5B;QACA,KAAKL,MAAL,CAAYO,IAAZ,CAAiBG,GAAG,GAAG,CAAvB,IAA4Bb,MAAM,CAACG,MAAP,CAAcO,IAAd,CAAmBF,GAAG,GAAG,CAAzB,CAA5B;MACD,CAbH;MAgBA,IAAI,IAAAnB,MAAA,CAAA0B,aAAA,EAAcpB,EAAd,CAAJ,EAAuB;QACrBA,EAAE,CAACI,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB;MACD;MAED,OAAO,IAAP;IACD;EAhCmB,CAAP;AAAA,C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}